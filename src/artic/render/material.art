// Opaque material structure
struct Material {
    bsdf:        Bsdf,
    emission:    fn (Vec3) -> EmissionValue,
    is_emissive: bool
}

// Opaque description of a point on a surface
struct SurfaceElement {
    is_entering: bool,              // True if the path enters the surface
    point:       Vec3,              // Point on the surface
    face_normal: Vec3,              // Geometric normal at the surface point
    uv_coords:   Vec2,              // UV coordinates on the surface
    attr:        fn (i32) -> Vec4,  // Vertex attributes (interpolated)
    local:       Mat3x3             // Local coordinate system at the surface point
}

// Result of sampling a BSDF
struct BsdfSample {
    in_dir: Vec3,  // Sampled direction
    pdf:    f32,   // BSDF value for the sample
    cos:    f32,   // Cosine between the sampled direction and the surface normal
    color:  Color  // Color of the sample
}

// Opaque BSDF structure
struct Bsdf {
    // Evaluates the reflectance of the material for the given pair of directions
    eval: fn (Vec3, Vec3) -> Color,
    // Evaluates the sampling probability density for a given pair of directions
    pdf: fn (Vec3, Vec3) -> f32,
    // Samples a direction
    sample: fn (&mut RndState, Vec3, bool) -> BsdfSample,
    // Returns true if the material is purely specular
    is_specular: bool
}

// Creates a material with no emission
fn @make_material(bsdf: Bsdf) = Material {
    bsdf =        bsdf,
    emission =    @ |_| make_emission_value(black, 1, 1),
    is_emissive = false
}

// Creates a material that emits light
fn @make_emissive_material(surf: SurfaceElement, bsdf: Bsdf, light: Light) = Material {
    bsdf = bsdf,
    emission = @ |in_dir| light.emission(in_dir, surf.uv_coords),
    is_emissive = true
}

// Creates a BSDF sample and checks that it lies on the right side of the surface
fn @make_bsdf_sample(surf: SurfaceElement, in_dir: Vec3, pdf: f32, cos: f32, color: Color, inverted: bool) -> BsdfSample {
    // Checks that the sample is above the surface (or under it if inverted is true)
    let valid = (pdf > 0) && (inverted ^ (vec3_dot(in_dir, surf.face_normal) > 0));
    BsdfSample {
        in_dir = in_dir,
        pdf    = if valid { pdf } else { 1 },
        cos    = cos,
        color  = if valid { color } else { black }
    }
}

// Weight pdf and color based on respective factors
fn @bsdf_sample_mulf(sample: BsdfSample, pdf_f: f32, color_f: f32) = BsdfSample {
    in_dir = sample.in_dir,
    pdf    = sample.pdf * pdf_f,
    cos    = sample.cos,
    color  = color_mulf(sample.color, color_f)
}

// Creates a fully absorbing BSDF that behaves like a black body
fn @make_black_bsdf() = Bsdf {
    eval =   @ |_, _| black,
    pdf  =   @ |_, _| 0,
    sample = @ |_, out_dir, _| BsdfSample { in_dir = out_dir, pdf = 1, cos = 1, color = black },
    is_specular = false
}

// Creates a purely diffuse BSDF
fn @make_diffuse_bsdf(math: Intrinsics, surf: SurfaceElement, kd: Color) = Bsdf {
    eval = @ |_, _| color_mulf(kd, 1 / flt_pi),
    pdf = @ |in_dir, _| cosine_hemisphere_pdf(positive_cos(in_dir, surf.local.col(2))),
    sample = @ |rnd, _, _| {
        let sample = sample_cosine_hemisphere(math, randf(rnd), randf(rnd));
        let color = color_mulf(kd, 1 / flt_pi);
        make_bsdf_sample(surf, mat3x3_mul(surf.local, sample.dir), sample.pdf, sample.dir.z, color, false)
    },
    is_specular = false
}

// Creates a BSDF based on orennayar
fn @make_orennayar_bsdf(math: Intrinsics, surf: SurfaceElement, alpha: f32, kd: Color) -> Bsdf {
    let a2 = alpha * alpha;
    let eval = @ |in_dir : Vec3, out_dir : Vec3| {
        let p1 = positive_cos(in_dir, surf.local.col(2));
        let p2 = positive_cos(out_dir, surf.local.col(2));
        let s  = p1 * p2 + positive_cos(out_dir, in_dir);
        let t  = math.fmaxf(p1, p2);

        let A = 1 - 0.5 * a2 / (a2 + 0.33);
        let B = 0.45 * a2 / (a2 + 0.09);
        let C = 0.17 * a2 / (a2 + 0.13); // Correction term
        color_add(color_mulf(kd, (A + (B * s / t)) / flt_pi), color_mul(kd, color_mulf(kd, C / flt_pi)))
    };

    Bsdf {
        eval = eval,
        pdf = @ |in_dir, _| cosine_hemisphere_pdf(positive_cos(in_dir, surf.local.col(2))),
        sample = @ |rnd, out_dir, _| {
            let sample = sample_cosine_hemisphere(math, randf(rnd), randf(rnd));
            make_bsdf_sample(surf, mat3x3_mul(surf.local, sample.dir), sample.pdf, sample.dir.z, eval(sample.dir, out_dir), false)
        },
        is_specular = false
    }
}

fn @make_rough_diffuse_bsdf(math: Intrinsics, surf: SurfaceElement, alpha: f32, kd: Color) -> Bsdf {
    if alpha > 0 { make_orennayar_bsdf(math, surf, alpha, kd) } else { make_diffuse_bsdf(math, surf, kd) }
}

// Creates a physically-correct Phong BSDF
fn @make_phong_bsdf(math: Intrinsics, surf: SurfaceElement, ks: Color, ns: f32) = Bsdf {
    eval = @ |in_dir, out_dir| {
        let cos = positive_cos(in_dir, vec3_reflect(out_dir, surf.local.col(2)));
        color_mulf(ks, fastpow/*math.powf*/(cos, ns) * (ns + 2) * (1 / (2 * flt_pi)))
    },
    pdf = @ |in_dir, out_dir| {
        let cos = positive_cos(in_dir, vec3_reflect(out_dir, surf.local.col(2)));
        cosine_power_hemisphere_pdf(math, cos, ns)
    },
    sample = @ |rnd, out_dir, _| {
        let reflect_out = vec3_reflect(out_dir, surf.local.col(2));
        let sample = sample_cosine_power_hemisphere(math, ns, randf(rnd), randf(rnd));
        let in_dir = mat3x3_mul(make_orthonormal_mat3x3(reflect_out), sample.dir);
        let cos = positive_cos(in_dir, surf.local.col(2));
        let color = color_mulf(ks, sample.pdf * (ns + 2) / (ns + 1));
        make_bsdf_sample(surf, in_dir, sample.pdf, cos, color, false)
    },
    is_specular = false
}

// Creates a plastic bsdf based on Fresnel equation (which is just a variadic mix bsdf with extra diffuse term)
fn @make_plastic_bsdf(math: Intrinsics, surf: SurfaceElement, n1: f32, n2: f32, ks: Color, kd: Color) -> Bsdf {
    // Layered BSDF
    let diffuse = make_diffuse_bsdf(math, surf, kd);
    let mirror  = make_mirror_bsdf(math, surf, ks);

    let N   = surf.local.col(2);
    let eta = if surf.is_entering { n1 / n2 } else { n2 / n1 };
    // Calculate approximate diffuse Fresnel reflectance
    let fdr = fresnel_diffuse_factor(n2 / n1);

    // Diffuse inner scattering term
    let diff_scattering = @|cos_i : f32| {
        let fi = fresnel(math, eta, cos_i);
         (1 - fi.factor) / (eta * eta * (1 - fdr))
    };

    // Apply inner scattering term to diffuse bsdf
    let diffuse_extra = Bsdf {
        eval   = @ |in_dir, out_dir| {
            let cos_i = positive_cos(in_dir, N);
            color_mulf(diffuse.eval(in_dir, out_dir), diff_scattering(cos_i))
        },
        pdf    = diffuse.pdf,
        sample = @ |rnd, out_dir, adjoint| {
            let s = diffuse.sample(rnd, out_dir, adjoint);
            BsdfSample { in_dir = s.in_dir, pdf = s.pdf, cos = s.cos, color = color_mulf(s.color,  diff_scattering(s.cos)) }
        },
        is_specular = diffuse.is_specular
    };

    // Fresnel based mix function
    let mix_f = @|out_dir : Vec3| -> f32 {
        let cos_o = positive_cos(out_dir, N);
        let fo    = fresnel(math, eta, cos_o);
        fo.factor
    };

    make_variadic_mix_bsdf(diffuse_extra, mirror, mix_f)
}

// Creates a perfect mirror BSDF
fn @make_mirror_bsdf(_math: Intrinsics, surf: SurfaceElement, ks: Color) = Bsdf {
    eval   = @ |_, _| black,
    pdf    = @ |_, _| 0,
    sample = @ |_, out_dir, _| {
        make_bsdf_sample(surf, vec3_reflect(out_dir, surf.local.col(2)), 1, 1, ks, false)
    },
    is_specular = true
}

// Creates a perfect glass BSDF
fn @make_glass_bsdf(math: Intrinsics, surf: SurfaceElement, n1: f32, n2: f32, ks: Color, kt: Color) = Bsdf {
    eval   = @ |_, _| black,
    pdf    = @ |_, _| 0,
    sample = @ |rnd, out_dir, adjoint| {
        let k = if surf.is_entering { n1 / n2 } else { n2 / n1 };
        let n = surf.local.col(2);
        let cos_i = vec3_dot(out_dir, n);

        let fterm = fresnel(math, k, cos_i);

        if !fterm.total {
            // Refraction
            let cos_t = fterm.cos_t;
            let F     = fterm.factor;
            if (randf(rnd) > F) {
                let t = vec3_sub(vec3_mulf(n, k * cos_i - cos_t), vec3_mulf(out_dir, k));
                let adjoint_term = if adjoint { k * k } else { 1 };
                return(make_bsdf_sample(surf, t, 1, 1, color_mulf(kt, adjoint_term), true))
            }
        }
        // Reflection
        make_bsdf_sample(surf, vec3_reflect(out_dir, n), 1, 1, ks, false)
    },
    is_specular = true
}

// Creates a perfect conductor BSDF
fn @make_conductor_bsdf(_math: Intrinsics, surf: SurfaceElement, ior: f32, k: f32, ks: Color) = Bsdf {
    eval   = @ |_, _| black,
    pdf    = @ |_, _| 0,
    sample = @ |_, out_dir, _| {
        let n = surf.local.col(2);
        let cos_i = vec3_dot(out_dir, n);

        let f = conductor_factor(ior, k, cos_i);

        let color = color_mulf(ks, f);
        make_bsdf_sample(surf, vec3_reflect(out_dir, n), 1, 1, color, false)
    },
    is_specular = true
}

// Creates a BSDF that passthroughs all rays and behaves like a refractive interface with ior=1
fn @make_passthrough_bsdf(surf: SurfaceElement) = Bsdf {
    eval   = @ |_, _| black,
    pdf    = @ |_, _| 0,
    sample = @ |_, out_dir, _| make_bsdf_sample(surf, vec3_neg(out_dir), 1, 1, white, false),
    is_specular = true
}

// Creates a BSDF that interpolates between two other BSDFs based on a variadic mix function
fn @make_variadic_mix_bsdf(mat1: Bsdf, mat2: Bsdf, mix_f: fn(Vec3) -> f32) = Bsdf {
    eval = @ |in_dir, out_dir| {
        let k = mix_f(out_dir);
        color_lerp(mat1.eval(in_dir, out_dir),
                   mat2.eval(in_dir, out_dir),
                   k)
    },
    pdf = @ |in_dir, out_dir| {
        let k = mix_f(out_dir);
        lerp(mat1.pdf(in_dir, out_dir),
             mat2.pdf(in_dir, out_dir),
             k)
    },
    sample = @ |rnd, out_dir, adjoint| {
        let k = mix_f(out_dir);
        let (sample, pdf, color) = if randf(rnd) >= k {
            let s = mat1.sample(rnd, out_dir, adjoint);
            let p = lerp(s.pdf, mat2.pdf(s.in_dir, out_dir), k);
            let c = color_lerp(s.color, mat2.eval(s.in_dir, out_dir), k);
            (s, p, c)
        } else {
            let s = mat2.sample(rnd, out_dir, adjoint);
            let p = lerp(mat1.pdf(s.in_dir, out_dir), s.pdf, k);
            let c = color_lerp(mat1.eval(s.in_dir, out_dir), s.color, k);
            (s, p, c)
        };
        BsdfSample { in_dir = sample.in_dir, pdf = pdf, cos = sample.cos, color = color }
    },
    is_specular = mat1.is_specular & mat2.is_specular
}

// Creates a BSDF that interpolates between two other BSDFs
fn @make_mix_bsdf(mat1: Bsdf, mat2: Bsdf, k: f32) = make_variadic_mix_bsdf(mat1, mat2, @|_| k)