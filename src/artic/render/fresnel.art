// Result of sampling a BSDF
struct FresnelTerm {
    total:  bool,
    cos_t:  f32,
    factor: f32
}

fn @make_fresnel_term(cos_t: f32, factor: f32) = FresnelTerm {
    total  = cos_t <= 0.0,
    cos_t  = if (cos_t < 0.0) { 0.0 } else { cos_t },
    factor = factor
}

fn @fresnel_factor(eta: f32, cos_i: f32, cos_t: f32) -> f32 {
    let R_s = (eta * cos_i - cos_t) / (eta * cos_i + cos_t);
    let R_p = (cos_i - eta * cos_t) / (cos_i + eta * cos_t);
    (R_s * R_s + R_p * R_p) * 0.5
}

fn @snell(eta: f32, cos_i: f32) = 1 - (1 - cos_i*cos_i) * eta * eta

fn @fresnel(math: Intrinsics, eta: f32, cos_i: f32) -> FresnelTerm {
    let cos2_t = snell(eta, cos_i);
    if cos2_t <= 0.0 {
        make_fresnel_term(-1.0, 1.0)
    } else {
        let cos_t = math.sqrtf(cos2_t);
        make_fresnel_term(cos_t, fresnel_factor(eta, cos_i, cos_t))
    }
}

fn @conductor_factor(n: f32, k: f32, cos_i: f32) -> f32 {
    let f	 = n*n + k*k;
    let d1	 = f * cos_i * cos_i;
	let d2	 = 2.0 * n * cos_i;
	let R_s  = (d1 - d2) / (d1 + d2);
	let R_p  = (f - d2 + cos_i*cos_i) / (f + d2 + cos_i*cos_i);
    (R_s * R_s + R_p * R_p) * 0.5
}

// Approximate diffuse Fresnel reflectance
/* This value quantifies what fraction of diffuse incident illumination
 * will, on average, be reflected at a dielectric material boundary
 */
fn @fresnel_diffuse_factor(n1: f32, n2: f32) -> f32 {
    let eta = n2/n1;
    if(eta < 1) {
        /* Fit by Egan and Hilgeman (1973). Works reasonably well for
         * "normal" IOR values (<2).
         * Max rel. error in 1.0 - 1.5 : 0.1%
         * Max rel. error in 1.5 - 2   : 0.6%
         * Max rel. error in 2.0 - 5   : 9.5%
         */
        -1.4399 * (eta * eta) + 0.7099 * eta + 0.6681 + 0.0636 / eta
    } else {
        /* Fit by d'Eon and Irving (2011)
         * Maintains a good accuracy even for unrealistic IOR values.
         * Max rel. error in 1.0 - 2.0   : 0.1%
         * Max rel. error in 2.0 - 10.0  : 0.2%  
         */
        let ieta1 = 1 / eta;
        let ieta2 = ieta1 * ieta1;
        let ieta3 = ieta2 * ieta1;
        let ieta4 = ieta3 * ieta1;
        let ieta5 = ieta4 * ieta1;
        0.919317 - 3.4793 * ieta1 + 6.75335 * ieta2 - 7.80989 * ieta3 + 4.98554 * ieta4 - 1.36881 * ieta5
    }
}
